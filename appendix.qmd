# Appendix

## Supplementary Material {#sec-app_material}

**XXXXXXXXXXX MISSING XXXXXXXXXXXXXX** Add Github repo


## Cryptocurrency Characteristics {#sec-app_characteristics}

Following @bianchiMispricingRiskCompensation2021, @liuCommonRisk2022, and @mercikCrosssectionalInteractionsCryptocurrency2025, I construct 41 asset-specific characteristics from OHCL prices, volume, and market capitalization of each cryptocurrency and group them into six categories: prize and size, volatility and risk, trading activity, liquidity, past returns, and distribution. The following list provides the definition of each characteristic and a description of their construction. 


#### Price and size

**`mcap`**. Last day's market capitalization. The market capitalization is the current cryptocurrency circulating supply multiplied by its current price in USD. 

**`prc`**. Last day's logged closing price. 

**`dh90`**. The closeness to the 90-day high is defined as the ratio of the last dayâ€™s price to the maximum price observed over the past 90 days [e.g., @george52WeekHigh2004].

#### Volatility and risk

**`beta`**. The market beta is calculated as the slope coefficient from a 30-day rolling regression of cryptocurrency's excess returns on the market portfolio excess returns [e.g., @lewellenConditionalCAPM2006]. The coin market portfolio is constructed daily as the value-weighted average of cryptocurrency returns in the sample.

**`ivol`**. Idiosyncratic volatility  is computed as the standard deviation of the residuals from the 30-day rolling CAPM regression, following the same approach as for `beta`. 

**`rvol_*d`**. Realized volatility, computed using the estimator of Yang and Zhang (2000) based on OHCL prices. I compute the daily realized volatility over rolling 7-and 30-day windows, denoted `rvol_7d` and `rvol_30d`, respectively. For $n > 1$ number of periods, the volatility estimate at time $t$ is:  

$$
\sigma_t = \sqrt{\sigma^2_O + k\sigma^2_C + (1 - k)\sigma^2_{RS}}
$$
where $\sigma^2_{RS}$ is the variance estimator of Rogers et al. (1994), and $\sigma^2_O$, $\sigma^2_C$, $k$ are given by 

$$
\sigma^2_O = \frac{1}{n-1}\sum\limits_{i=1}^n(o_i - \bar o)^2,
$$

$$
\sigma^2_C = \frac{1}{n-1}\sum\limits_{i=1}^n(c_i - \bar c)^2,
$$

$$
k = \frac{\alpha -1}{\alpha + \frac{n+1}{n-1}}
$$

with $o = ln\,O_t - ln\,C_{t-1}$, and $c = ln\,C_t - ln\,O_t$. Here, $C_{t-1}$ denotes the previous day's closing price and $O_t$ the current day's opening price. I set the constant $\alpha = 1.34$, following Yang and Zhang (2000), who recommend this as the best value in practice.  


**`retvol`**. Standard deviation of daily returns over the past 7 days [e.g., @angCrossSectionVolatility2006].

**`var`**. The historical Value-at-Risk at the 5% level, based on daily returns over the past 90 days. 

**`es_5`**. The expected shortfall at the 5% level, based on daily returns over the past 90 days. 

**`delay`**. From the regression
$$
R_i - R_f = \alpha^i + \beta^i_{CMKT}CMKT + \beta^i_{CMKT_{-1}}CMKT_{-1} + \beta^i_{CMKT_{-2}}CMKT_{-2} + \epsilon_i, 
$$ 
where $R_i$ is the return on asset $i$, $R_f$ is the risk-free rate, and $CMKT$, $CMKT_{-1}$, and $CMKT_{-2}$ are the current, lagged one-and two-day coin market portfolio excess returns, `delay` is the improvement in $R^2$ relative to the standard CAPM regression using only the current market portfolio excess returns [e.g., @houMarketFrictions2005]. The coin market portfolio is constructed as in `beta`.


#### Trading activity

**`volume`**. Last day's daily trading volume expressed in US dollars. The trading volume is the total amount of a cryptocurrency exchanged in a given day, measured in USD.

**`volume_*d`**. The average trading volume over the past 7 and 30 days, denoted `volume_7d` and `volume_30d`, respectively. 

**`turn`**. Turnover, computed as the last day's trading volume over the current market capitalization [e.g., @datarLiquidityStock1998].

**`turn_7d`**. Average turnover over the past 7 days. 


**`std_turn`**. The standard deviation of the turnover over the past 30 days. 

**`std_vol`**. The log standard deviation of trading volume over the past 30 days.

**`cv_vol`**. The coefficient of variation is the standard deviation of the daily trading volume divided by its mean, over the past 30 days [e.g., @babiakVariationsTrading2022]. 

#### Liquidity

**`bidask`**. The cryptocurrency bid-ask spread, computed from OHCL prices using the approximation of @bidask. 

**`illiq`**. The @amihudIlliquidityStock2002  price impact (illiquidity) measure, computed as the 90-day average of the ratio of the absolute daily return to daily trading volume.

**`sat`**. The standardized abnormal turnover, following @garfinkelDisagreementReturns. The measure is calculated as the last day's turnover minus its average over the past 30 days, divided by the turnover's standard deviation over the same 30-day period.

**`dto`**. De-trended turnover [e.g., @garfinkelMeasuringInvestors2009]. It is computed as turnover minus the value-weighted average daily market turnover, de-trended by its 180-day median.

**`volsh_*d`**. Volume shock, defined as the log-deviation of daily trading volume from its $k$-day rolling average [e.g., @llorenteDynamicVolumeReturn2002]. For `volsh_15d` and `volsh_30d`, $k = 15$ and $k = 30$, respectively. For cryptocurrency $i$ at time $t$:

$$
v_{i,t} = \log(\text{Volume}_{i,t}) - \log\left( \frac{1}{k} \sum_{s=1}^{k} \text{Volume}_{i,t-s} \right)
$$

#### Past returns

**`r2_1`**. Daily reversal, defined as the previous day's cryptocurrency return. 

**`r*_1`**. The 7, 14, 21, and 30-day momentum, denoted `r7_1`, `r14_1`, `r21_1`, and `r30_1`, respectively. Momentum is defined as the cumulative return from the previous $k \in \{7, 14, 21, 30\}$ days up to one day before the return prediction.  

**`r30_14`**. Cumulative return from the previous 30 days up to 14 days before the return prediction. 

**`r180_60`**. Cumulative return from the previous 180 days up to 60 days before the return prediction.

**`alpha`**. The CAPM alpha, defined as the intercept from a 30-day rolling regression of cryptocurrency's excess returns on the market portfolio excess returns. The market portfolio is constructed as in `beta`.

#### Distribution

**`skew_*d`**. Skewness of daily returns over the previous 7 and 30 days, denoted `skew_7d` and `skew_30d`, respectively. 

**`kurt_*d`**. Kurtosis of daily returns over the previous 7 and 30 days, denoted `kurt_7d` and `kurt_30d`, respectively. 

**`maxret_*d`**. The maximum daily return over the past 7 and 30 days, denoted `maxret_7d` and `maxret_30d`, respectively. 

**`minret_*d`**. The minimum daily return over the past 7 and 30 days, denoted `minret_7d` and `minret_30d`, respectively.

## Observable risk factors {#sec-obs_factors}

I construct the first three factors, market (CMKT), momentum (MOM), and size (SMB) following the paper of @liuCommonRisk2022, which construct a 3-factor model for the cryptocurrency market analogue to the FF3 model (@famaCommonRisk1993) in the equity market. Additionally, I construct a liquidity and a volatility factor based on @bianchi2021factor and @lanRiskFactors2025.

The cryptocurrency market factor (CMKT) as the daily excess return on the aggregate cryptocurrency market. First, I compute the daily cryptocurrency market return as the value-weighted average return of all cryptocurrencies in the sample. For cryptocurrencies $i = 1, ..., N$, the daily market return at time $t$ is  

$$
r_t^M = \frac{\sum_{i=1}^N r_{it} \cdot marketcap_{it}}
             {\sum_{i=1}^N marketcap_{it} }
$$
where $r_{it}$ denotes the return of cryptocurrency $i$ from day $t-1$ to $t$ . 

The cryptocurrency market excess return (CMKT) is then constructed as the difference between the cryptocurrency market return and the risk-free rate, proxied by the 1-month Treasury bill rate from the FRED. Since the treasury bill yield is annualized, I convert it to a daily rate assuming 252 trading days per year. 

Then, I construct the cryptocurrency momentum factor (MOM) based on three week momentum. The construction proceeds in two steps. First, for each cryptocurrency $i$, I construct the past three-week momentum from day $t-22$ to $t-1$. Using characteristics up to $t-1$ avoid including today's price information and thereby avoid look-ahead bias. Second, on each day $t$, I sort cryptocurrencies into two portfolio groups. First, coins are split into two size groups, small and big, using the cross-sectikonal median market capitalization. Then, within each size group, cryptocurrencies are divided into three groups based on their three-week momentum as follows: the bottom 30% cryptocurrencies (Low), the middle 40% (Med), and the top 30% (High). Then, I compute value-weighted portfolio returns within each size-momentum group. 

Finally, the momentum factor (MOM) is constructed as the difference between the average return return of the high-momentum portfolios and the average return of the low-momentum portfolios

$$
MOM_t = \frac{1}{2}\big(\text{Small High} + \text{Big High}\big) 
       - \frac{1}{2}\big(\text{Small Low} + \text{Big Low}\big)
$$

The next three factors are constructed as sorted portfolios using simple quantiles. For the size factor (SMB) I sort assets cross-sectionally into quintiles based on their market capitalization and compute the value-weighted return for each group. Then, I calculated the factor as the difference in returns between the top and the bottom quintiles. The liquidity and volatility factors are constructed analogously, but sorting characteristics but the amihud ratio or liquidity (where the least (most) liquid cryptocurrencies are on the top (bottom) quintiles), and by their 30-day realized volatility, respectively. Both characteristics are described in @sec-app_characteristics, and as with CMKT, they are calculated until time $t-1$ to avoid look-ahead bias.


## Software {#sec-software}

<!-- Use \ to escape semi-colon, or it will confuse Pandoc / Quarto  -->

This thesis was fully written using [Quarto](https://quarto.org/) [@Quarto_2025], running in RStudio [v. 2025.5.1.513\; @rstudio]  on Fedora Linux 42 (Workstation Edition). 

I used R 4.5.1 [@base] and the following R packages: bidask v. 2.1.4 [@bidask], moments v. 0.14.1 [@moments], pcaMethods v. 2.0.0 [@pcaMethods], PerformanceAnalytics v. 2.0.8 [@PerformanceAnalytics], quantmod v. 0.4.28 [@quantmod], slider v. 0.3.2 [@slider], tidyverse v. 2.0.0 [@tidyverse], and zoo v. 1.8.14 [@zoo]. 

Additionally, I used Python 3.15.3 [@python] and the following packages: numpy [@harris2020array], pandas [@reback2020pandas], matplotlib [@Hunter:2007], and scipy [@2020SciPy-NMeth].